---
export const prerender = false;
import { fetchProductsInCategory } from '~/utils/sanity';
// getting the category from the URL
import Layout from '~/layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';

const metadata = {
  title: 'product site',
  ignoreTitleTemplate: true,
};

const { category } = Astro.params;

const products = await fetchProductsInCategory(category);
---

<Layout metadata={metadata}>
  <div class="m-5">
    <h1 class="text-3xl text-center m-2 p-2 font-bold">
      Our <span class="text-primary"
        >{
          category
            ?.split(' ')
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ')
        }</span
      > Products
    </h1>
    {/* Products Grid */}
    <div class="flex flex-wrap justify-center" id="products-grid">
      {
        products.map((product: string) => (
          <div
            class="product-card w-full min-w-56 sm:w-1/6 m-2 border-2 p-2 rounded-md cursor-pointer hover:scale-105 transition-transform"
            data-category={category}
          >
            <div class="relative overflow-hidden rounded-lg animate-fade">
              <img src={product.image} alt={product.title} class="w-full h-64 object-fit " />
            </div>
            <h3 class="text-lg text-center font-semibold mt-2">{product.title}</h3>
          </div>
        ))
      }
    </div>
  </div>
</Layout>

{/* Fullscreen Modal */}
<div id="fullscreen-modal" class="fixed inset-0 bg-black bg-opacity-90 hidden items-center justify-center z-50">
  <img id="fullscreen-img" class="max-h-[90vh] max-w-[90vw] object-contain animate-fade" src="" alt="Fullscreen view" />
  <button id="next-image-btn" class="absolute top-1/2 right-4 rounded-md bg-white/30 hover:bg-white/50">
    <Icon name="tabler:chevron-right" class="w-8 h-8 text-white" />
    <button id="prev-image-btn" class="absolute top-1/2 left-4 rounded-md bg-white/30 hover:bg-white/50">
      <Icon name="tabler:chevron-left" class="w-8 h-8 text-white" />
    </button>
    <button
      id="close-fullscreen-btn"
      class="absolute top-4 right-4 text-white text-5xl pb-1 px-2 rounded-md bg-white/30 hover:bg-white/50"
      >Ã—
    </button>
  </button>
</div>

<script is:inline>
  //  wait for the DOM to be loaded
  document.addEventListener('astro:page-load', () => {
    const productCards = document.querySelectorAll('.product-card');
    // Global state
    let currentCategoryProductState = Array.from(productCards);
    let currentProductIndex = null;

    // event listeners for the fullscreen modal
    document.querySelectorAll('.product-card').forEach((product) => {
      product.addEventListener('click', () => {
        currentProductIndex = currentCategoryProductState.findIndex((card) => card === product);
        console.log(currentProductIndex);
        openFullscreen(product.querySelector('img').src);
      });
    });

    // event to the close button
    document.getElementById('close-fullscreen-btn').addEventListener('click', closeFullscreen);

    // event to the next button
    document.getElementById('next-image-btn').addEventListener('click', () => nextImage(currentCategoryProductState));

    // event to the prev button
    document.getElementById('prev-image-btn').addEventListener('click', () => prevImage(currentCategoryProductState));

    // event for the arrow keys when the modal is open
    document.addEventListener('keydown', (e) => {
      if (document.getElementById('fullscreen-modal').style.display === 'flex') {
        if (e.key === 'ArrowRight') {
          nextImage(currentCategoryProductState);
        } else if (e.key === 'ArrowLeft') {
          prevImage(currentCategoryProductState);
        } else if (e.key === 'Escape') {
          closeFullscreen();
        }
      }
    });

    // Fullscreen functions
    function openFullscreen(imgSrc) {
      const modal = document.getElementById('fullscreen-modal');
      const fullscreenImg = document.getElementById('fullscreen-img');
      fullscreenImg.classList.add('animate-fade');
      setTimeout(() => {
        fullscreenImg.classList.remove('animate-fade');
      }, 1000);
      fullscreenImg.src = imgSrc;
      modal.style.display = 'flex';
    }

    // Next image function
    function nextImage(currentCategoryProductState) {
      currentProductIndex = (currentProductIndex + 1) % currentCategoryProductState.length;
      openFullscreen(currentCategoryProductState[currentProductIndex].querySelector('img').src);
    }

    //prev image function
    function prevImage(currentCategoryProductState) {
      currentProductIndex =
        currentProductIndex === 0 ? currentCategoryProductState.length - 1 : currentProductIndex - 1;
      openFullscreen(currentCategoryProductState[currentProductIndex].querySelector('img').src);
    }

    function closeFullscreen() {
      const modal = document.getElementById('fullscreen-modal');
      modal.style.display = 'none';
    }

    // Close modal when clicking outside the image
    document.getElementById('fullscreen-modal').addEventListener('click', (e) => {
      if (e.target.id === 'fullscreen-modal') {
        closeFullscreen();
      }
    });

    console.log('loaded');
  });
</script>
